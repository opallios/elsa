@version: 3.4

options {
        log_fifo_size(30000);
        threaded(yes); # enable if using Syslog-NG 3.3.x
        use_dns (no); # IMPORTANT! A busy syslog server can become unresponsive if DNS lookups fail, so we disable them.
        use_fqdn (no);
        keep_hostname (yes);
};
source s_file {
file("/data/fluentd/json_log/out_files/json.out.log" follow_freq(1));
file("/data/fluentd/apache_log/out_files/apache.out.log" follow_freq(1));
file("/data/fluentd/netflow_log/out_files/netflow.out.log" follow_freq(1));
file("/data/fluentd/custom_log/out_files/custom.out.log" follow_freq(1));
};

source s_network {
	# no-multi-line means parse message as-is, newlines included, to allow for multi-line messages
	tcp(flags(no-multi-line));
    udp(flags(no-multi-line));
};

source s_internal {
	internal();
};

source s_realtime {
	pipe("/data/elsa/tmp/realtime" flags(expect-hostname));
};

source s_import {
	pipe("/data/elsa/tmp/import" flags(expect-hostname syslog-protocol));
};

source s_ops {
	unix-dgram("/data/elsa/tmp/ops" flags(expect-hostname syslog-protocol no-multi-line));
};

parser p_db {
	db-parser(file("/usr/local/elsa/node/conf/merged.xml"));
};

filter f_rewrite_cisco_program { match('^(%[A-Z\_]+\-\d\-[0-9A-Z\_]+): ([^\n]+)' value("MSGONLY") type("pcre") flags("store-matches" "nobackref")); };
filter f_rewrite_cisco_program_2 { match('^[\*\.]?(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}(?:\.\d+)?(?: [A-Z]{3})?: (%[^:]+): ([^\n]+)' value("MSGONLY") type("pcre") flags("store-matches" "nobackref")); };
filter f_rewrite_cisco_program_3 { match('^\d+[ywdh]\d+[ywdh]: (%[^:]+): ([^\n]+)' value("MSGONLY") type("pcre") flags("store-matches" "nobackref")); };
filter f_rewrite_cisco_program_4 { match('^\d{6}: [\*\.]?(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+\d{1,2}\s\d{1,2}:\d{1,2}:\d{1,2}(?:\.\d+)?(?: [A-Z]{3})?: (%[^:]+): ([^\n]+)' value("MSGONLY") type("pcre") flags("store-matches" "nobackref")); };

filter f_unclassified { "${.classifier.class}" eq "unknown" };
rewrite r_unparsed { set("98", value("MSGID")); };

rewrite r_cisco_program {
        set("$1", value("PROGRAM") condition(filter(f_rewrite_cisco_program) or filter(f_rewrite_cisco_program_2) or filter(f_rewrite_cisco_program_3) or filter(f_rewrite_cisco_program_4)));
        set("$2", value("MESSAGE") condition(filter(f_rewrite_cisco_program) or filter(f_rewrite_cisco_program_2) or filter(f_rewrite_cisco_program_3) or filter(f_rewrite_cisco_program_4)));
};

rewrite r_snare { subst("MSWinEventLog.+(Security|Application|System).+", "$1", value("PROGRAM") flags(global)); };
# URL encode any literal pipes so the tab rewriter doesn't introduce ambiguity
rewrite r_from_pipes { subst('\|', "%7C", value("MESSAGE") flags(global)); };
rewrite r_pipes { subst("\t", "|", value("MESSAGE") flags(global)); };
rewrite r_host { set("$SOURCEIP", value("HOST")); };
rewrite r_extracted_host { set("$pdb_extracted_sourceip", value("HOST") condition("$pdb_extracted_sourceip" != "")); };
rewrite r_extracted_timestamp {
	set("$S_UNIXTIME", value("SOURCE"));
	set("$pdb_extracted_timestamp", value("SOURCE") condition("$pdb_extracted_timestamp" != ""));
};

template t_db_parsed { template("$R_UNIXTIME\t$HOST\t$PROGRAM\t${.classifier.class}\t$MSGONLY\t${i0}\t${i1}\t${i2}\t${i3}\t${i4}\t${i5}\t${s0}\t${s1}\t${s2}\t${s3}\t${s4}\t${s5}\n"); };
template t_db_parsed_import { template("$MSGID\t$SOURCE\t$HOST\t$PROGRAM\t${.classifier.class}\t$MSGONLY\t${i0}\t${i1}\t${i2}\t${i3}\t${i4}\t${i5}\t${s0}\t${s1}\t${s2}\t${s3}\t${s4}\t${s5}\n"); };
template t_ops { template("$S_UNIXTIME\t$HOST\t$PROGRAM\t$MSGID\t$MSGONLY\t${.SDATA.elsa@32473.line_number}\t${.SDATA.elsa@32473.pid}\t${.SDATA.elsa@32473.client}\t${.SDATA.elsa@32473.qid}\t\t\t${.SDATA.elsa@32473.priority}\t${.SDATA.elsa@32473.file}\t${.SDATA.elsa@32473.method}\t${.SDATA.elsa@32473.hostname}\t\t\n"); };
template t_unparsed { template("Unparsed host=$HOST program=$PROGRAM msg=$MSGONLY\n"); };
#destination d_elsa { file("/data/elsa/tmp/buffers/mylogs" template(t_db_parsed)); };
destination d_elsa { program("perl /usr/local/elsa/node/elsa.pl -c /etc/elsa_node.conf" template(t_db_parsed)); };
destination d_elsa_import { program("perl /usr/local/elsa/node/elsa.pl -c /etc/elsa_node.conf -f __IMPORT__" template(t_db_parsed_import)); };
destination d_elsa_ops { program("perl /usr/local/elsa/node/elsa.pl -c /etc/elsa_node.conf -f __OPS__" template(t_ops)); };
destination d_unclassified { unix-dgram("/data/elsa/tmp/ops" flags(syslog-protocol) template(t_unparsed)); };
#destination d_debug { unix-dgram("/data/elsa/tmp/debug" template(t_db_parsed)); };

###INCLUDE_PLACEHOLDER###

log {
	source(s_ops);
	destination(d_elsa_ops);
	flags(final);
};

log { 
	source(s_network);
	source(s_realtime);
	rewrite(r_host);
	rewrite(r_cisco_program);
	rewrite(r_snare);
	rewrite(r_from_pipes);
	rewrite(r_pipes);
	parser(p_db);
	rewrite(r_extracted_host);
	###FILTER_UNPARSED###log { filter(f_unclassified); rewrite(r_unparsed); destination(d_unclassified); flags(final); };
	log { destination(d_elsa); };
	#log { destination(d_debug); };
	#flags(flow-control);
};

log {    source(s_file); 
	source(s_import);
	rewrite(r_cisco_program);
	rewrite(r_snare);
#	rewrite(r_from_pipes);
#	rewrite(r_pipes);
	parser(p_db);
	rewrite(r_extracted_host);
	rewrite(r_extracted_timestamp);
	destination(d_elsa_import);
	#flags(flow-control);
        destination(d_elsa);
};
